<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开源作业总结报告</title>
      <link href="/2024/04/22/summary/"/>
      <url>/2024/04/22/summary/</url>
      
        <content type="html"><![CDATA[<p>针对本次开源作业的总结</p><span id="more"></span><h2 id="博客主题和选取原因"><a href="#博客主题和选取原因" class="headerlink" title="博客主题和选取原因"></a>博客主题和选取原因</h2><p>我选择了Hexo的icarus主题作为生成博客的工具，其主要有以下原因：</p><ul><li>Hexo使用node.js，生成速度超快，几百个页面可以瞬间完成渲染。</li><li>无论是在本地测试还是部署到Github pages都十分方便</li><li>支持markdown的所有功能，还能整合多种插件，具有极强的可扩展性。</li><li>icarus是一个比较成熟的主题，可修改空间很大，可支持移动端，可以增加多种多样的功能且有文档支撑非常方便。</li></ul><h2 id="页面布局和设计思路"><a href="#页面布局和设计思路" class="headerlink" title="页面布局和设计思路"></a>页面布局和设计思路</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>分为三栏，分别展示作者信息，目录，归档，最新文章，标签统计信息，以及所有文章缩略的信息。<br><img src="image.png" alt="首页"></p><h3 id="文章详情"><a href="#文章详情" class="headerlink" title="文章详情"></a>文章详情</h3><p>展示文章笔记，也包含发表时间，更新时间等信息<br><img src="image-1.png" alt="文章详情"></p><h3 id="目录页"><a href="#目录页" class="headerlink" title="目录页"></a>目录页</h3><p><img src="image-3.png" alt="目录"></p><h3 id="归档页"><a href="#归档页" class="headerlink" title="归档页"></a>归档页</h3><p><img src="image-2.png" alt="归档"></p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src="image-4.png" alt="标签"></p><h2 id="功能实现和技术选择"><a href="#功能实现和技术选择" class="headerlink" title="功能实现和技术选择"></a>功能实现和技术选择</h2><ul><li>在windows11下进行</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>首先需要安装nodejs和git，接着使用npm进行安装hexo的包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-cli -g</span></span><br></pre></td></tr></table></figure></li><li>初始化一个博客项目<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> blog</span></span><br></pre></td></tr></table></figure></li><li>启动服务<br>默认端口为4000，即访问localhost:4000<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="选择安装主题"><a href="#选择安装主题" class="headerlink" title="选择安装主题"></a>选择安装主题</h3><p>可以在<code>hexo.io</code>下找到想要的模板，这里选择的模板是icarus</p><ul><li>将选择的模板拉取到<code>blog/themes</code>目录下面</li><li>安装依赖并设置hexo的主题为icarus<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-theme-icarus</span><br><span class="line">$ hexo config theme icarus</span><br></pre></td></tr></table></figure></li><li>生成新的<code>post.md</code>文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new  &quot;my post&quot;</span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ul><li><p>blog仓库与远程仓库绑定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote remove origin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin 你的仓库地址</span></span><br></pre></td></tr></table></figure></li><li><p>安装部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li><p>部署到远程，修改<code>_config.yml</code>文件，并新建远程仓库，其名称为kxkllday.github.io</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: http://kxkllday.github.io</span><br><span class="line">root: /</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: https://github.com/kxkllday/kxkllday.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="遇到的问题和解决办法"><a href="#遇到的问题和解决办法" class="headerlink" title="遇到的问题和解决办法"></a>遇到的问题和解决办法</h2><h3 id="图片显示异常，没有办法显示出来"><a href="#图片显示异常，没有办法显示出来" class="headerlink" title="图片显示异常，没有办法显示出来"></a>图片显示异常，没有办法显示出来</h3><h4 id="方法1，但在这里没用"><a href="#方法1，但在这里没用" class="headerlink" title="方法1，但在这里没用"></a>方法1，但在这里没用</h4><ul><li>安装相关插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li>修改<code>_config.yml</code>配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>将图片存在与md文件同名的文件夹下面</li></ul><h3 id="首页一开始没有办法仅仅展示部分缩略信息"><a href="#首页一开始没有办法仅仅展示部分缩略信息" class="headerlink" title="首页一开始没有办法仅仅展示部分缩略信息"></a>首页一开始没有办法仅仅展示部分缩略信息</h3><p>在md文件在front-matter中使用如下代码分割开来需要展示在首页的缩略信息以及不展示的更多信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结，配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIGMOD 2023 GPTuner</title>
      <link href="/2024/04/22/SIGMOD-2023-GPTuner/"/>
      <url>/2024/04/22/SIGMOD-2023-GPTuner/</url>
      
        <content type="html"><![CDATA[<p>这是一篇关于GPT增强数据库中旋钮调优任务的论文<br><a href="https://arxiv.org/abs/2311.03157">https://arxiv.org/abs/2311.03157</a></p><span id="more"></span><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><h5 id="Existing-automatic-tuning-systems-still-incur-significant-tuning-costs-or-only-yields-sub-optimal-performance"><a href="#Existing-automatic-tuning-systems-still-incur-significant-tuning-costs-or-only-yields-sub-optimal-performance" class="headerlink" title="Existing automatic tuning systems still incur significant tuning costs or only yields sub-optimal performance."></a>Existing automatic tuning systems still incur significant tuning costs or only yields sub-optimal performance.</h5><p>这主要是因为：</p><ul><li>ignore the extensive <strong>domain knowledge</strong> available (e.g., DBMS manuals and forum discussions)</li><li>only rely on the <strong>runtime feedback of benchmark evaluations</strong> to guide the optimization</li><li>they utilize the domain knowledge in a limited way</li></ul><h5 id="LLM-is-a-notable-step-forward-but-not-adequate-yet"><a href="#LLM-is-a-notable-step-forward-but-not-adequate-yet" class="headerlink" title="LLM is a notable step forward, but not adequate yet."></a>LLM is a notable step forward, but not adequate yet.</h5><ul><li>since domain knowledge typically comes in the form of <strong>DBMS documents and discussions from DBMS forums</strong>, it involves a complex and lengthy workflow to process such heterogeneous and noisy knowledge:</li><li>the brittle nature of LLM (i.e. small modifications to the prompt can cause large variations in the model outputs) and the hallucination problem of LLM(i.e., LLM generates answers that seem correct but are factually false)</li></ul><h5 id="Even-if-structured-knowledge-is-developed-its-integration-into-the-optimization-process-is-deficient"><a href="#Even-if-structured-knowledge-is-developed-its-integration-into-the-optimization-process-is-deficient" class="headerlink" title="Even if structured knowledge is developed, its integration into the optimization process is deficient"></a>Even if structured knowledge is developed, its integration into the optimization process is deficient</h5><p>将结构化的数据整合进入BO流程存在问题。如果不修改标准工作流程，可以使用的信息是手册推荐的范围约束。但是如果利用建议值和特殊值这两个考虑的内容，则需要创新的优化框架。</p><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions:"></a>Contributions:</h2><ul><li>leverages domain knowledge extensively</li><li>automatically to optimize search space</li><li>enhance the runtime feedback-based optimization process</li></ul><p>k1 &#x3D; xx  k2 &#x3D; xx k3 &#x3D;xx  k4 &#x3D; xx </p><p>100 &lt; k1 &lt; 1000</p><p>k1 &#x3D; 100 , k1 &#x3D;200, k1 &#x3D;300 ,k1&#x3D;400</p><p>k1 &#x3D; 256 </p><p>Deductive Beam Search: Decoding Deducible Rationale for Chain-of-Thought Reasoning</p><ul><li>Self-RAG</li><li>Chain of Thought</li><li>Tree of Thought</li><li>reflection</li><li>react (agent)ReAct: Synergizing Reasoning and Acting in Language Models</li></ul><p>Lora 7B  48G </p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="image.png" alt="image.png"><br>❶ User provides the DBMS to be tuned (e.g., PostgreSQL or MySQL), the target workload, and the optimization objective (e.g., latency or throughput).<br>❷ GPTuner collects and refines the heterogeneous knowledge from different sources (e.g., <strong>GPT-4, DBMS manuals and web forums</strong>) to construct Tuning Lake, a collection of DBMS tuning knowledge.<br>❸ GPTuner unifies the refined tuning knowledge from Tuning Lake into a** structured view** accessible to machines (e.g., JSON).<br>❹ GPTuner <strong>reduces the search space dimensionality</strong> by selecting important knobs to tune<br>❺ GPTuner optimizes the search space in terms of** the value range for each knob** based on structured knowledge.<br>❻ GPTuner explores the optimized space via a novel <strong>Coarse-to-Fine Bayesian Optimization framework</strong><br>❼ identifies satisfactory knob configurations within resource limits (e.g., the maximum optimization time or iterations specified by users).</p><h2 id="C1-unify-a-structured-view-of-the-heterogeneous-domain-knowledge-while-balancing-a-trade-off-between-cost-and-quality"><a href="#C1-unify-a-structured-view-of-the-heterogeneous-domain-knowledge-while-balancing-a-trade-off-between-cost-and-quality" class="headerlink" title="C1 unify a structured view of the heterogeneous domain knowledge while balancing a trade-off between cost and quality."></a>C1 unify a structured view of the heterogeneous domain knowledge while balancing a trade-off between cost and quality.</h2><p>&#x3D;&gt;使用LLM收集和提炼异构信息，并结构化表示</p><h3 id="Knowledge-Preparation"><a href="#Knowledge-Preparation" class="headerlink" title="Knowledge Preparation"></a>Knowledge Preparation</h3><h4 id="data-ingestion"><a href="#data-ingestion" class="headerlink" title="data ingestion"></a>data ingestion</h4><p>从资源（web forums、GPT、DBMS册）中收集tuning knowledge</p><h4 id="data-cleaning"><a href="#data-cleaning" class="headerlink" title="data cleaning"></a>data cleaning</h4><p>建模为二元分类问题，采用LLM解决<br>针对一个knob，给出候选的tuning knowledge和DBMS的system view；在提示中给出几个例子<br>&#x3D;&gt;LLM评估tuning knowledge和system view是否冲突，放弃冲突的知识</p><h4 id="data-integration"><a href="#data-integration" class="headerlink" title="data integration"></a>data integration</h4><p>使用LLM，根据信息源的可靠性，手动设置优先级（Manual&gt;Web&gt;LLM），进行整合一个knob的多条tuning信息</p><h4 id="data-correction"><a href="#data-correction" class="headerlink" title="data correction"></a>data correction</h4><p>上步由LLM完成的summary任务，可能与事实不符。<br>使用LLM进行事实一致性检查（prompt: the summarization and the source contents）<br>&#x3D;&gt; 不一致，提示GPT重新生成摘要，再次提交摘要和源内容（Mannual、Web、GPT）给GPT，直到GPT识别没有问题</p><h3 id="Knowledge-Transformation（data-extraction）"><a href="#Knowledge-Transformation（data-extraction）" class="headerlink" title="Knowledge Transformation（data extraction）"></a>Knowledge Transformation（data extraction）</h3><h4 id="Attributes："><a href="#Attributes：" class="headerlink" title="Attributes："></a>Attributes：</h4><p>suggested_values( good staring points for new scenario ), min_value, max_value(默认值过宽，优化过程复杂化，带来系统奔溃的风险 ) and special_value（会导致DBMS不同的行为）</p><h4 id="Attribute-Values："><a href="#Attribute-Values：" class="headerlink" title="Attribute Values："></a>Attribute Values：</h4><p>Prompt Ensemble Algorithm<br><img src="image-1.png" alt="image.png"></p><ol><li>we decompose the transformation task into two subtasks of extracting (1) <strong>suggested_values, min_value, max_value</strong> and (2) <strong>special_value</strong>, respectively. Next, we prepare the prompt including examples following the template in Figure 9 for each subtask.</li><li>vary the prompts by <strong>changing the examples</strong> provided for few-shots learning. 由于LLM的脆弱和幻觉问题，对每个prompt，从手工构建的K(10)个examples随机选取n()3个</li><li>aggregate the results via a majority vote strategy. 对每个属性选择频率最高的值</li></ol><h2 id="C2-integrate-the-knowledge-into-the-optimization-process"><a href="#C2-integrate-the-knowledge-into-the-optimization-process" class="headerlink" title="C2 integrate the knowledge into the optimization process."></a>C2 integrate the knowledge into the optimization process.</h2><p>使用结构化的数据S：</p><h3 id="design-a-workload-aware-and-training-free-knob-selection-strategy"><a href="#design-a-workload-aware-and-training-free-knob-selection-strategy" class="headerlink" title="design a workload-aware and training-free knob selection strategy"></a>design a workload-aware and training-free knob selection strategy</h3><p>Motivation: Existing approaches rely on ML-based algorithms to select important knobs and this requires hundreds to thousands of evaluations on DBMS under different workloads and configurations<br>使用LLM模拟DBA的旋钮选择：</p><ul><li>System-Level selects knobs based on the specific DBMS product. 提示GPT-4根据DBMS产品推荐调整旋钮</li><li>Workload-Level selects knobs based on the workload type. 根据workload类型和优化目标</li><li>Query-Level selects knobs based on the bottleneck of queries.在提示中包含每个查询的执行计划，LLM选择瓶颈感知旋钮</li><li>Knob-Level complements interdependent knobs to a given target knob set.</li></ul><h3 id="develop-a-search-space-optimization-technique-considering-the-value-range-of-each-knob"><a href="#develop-a-search-space-optimization-technique-considering-the-value-range-of-each-knob" class="headerlink" title="develop a search space optimization technique considering the value range of each knob,"></a>develop a search space optimization technique considering the value range of each knob,</h3><p>对每个维度的数据，舍弃无意义的区域，突出有前景的空间，考虑特殊情况</p><h4 id="Region-Discard"><a href="#Region-Discard" class="headerlink" title="Region Discard"></a>Region Discard</h4><p>We utilize min_value and max_value to discard some regions for the following cases：</p><ol><li>The regions are unlikely to result in promising performance.</li><li>The regions could seize too many system resources.对资源相关的knob</li><li>The regions that can make the DBMS crash.对资源相关的knob</li></ol><h4 id="Tiny-Feasible-Space-？"><a href="#Tiny-Feasible-Space-？" class="headerlink" title="Tiny Feasible Space  ？"></a>Tiny Feasible Space  ？</h4><p>apply a set of <strong>multiplicators</strong> for each **suggested value V **of all numerical knobs<br>considering the <strong>value range</strong> and calculating the multiplicators <strong>dynamically</strong><br>For knob For knob 𝑘, we denote its <strong>maximum (minimum) value as 𝑈</strong><br>The choice of 𝑈 determines the deviation directionand 𝛽 controls the changing extends.</p><p>Tiny Feasible Space 离散空间</p><h4 id="Virtual-Knob-Extension"><a href="#Virtual-Knob-Extension" class="headerlink" title="Virtual Knob Extension"></a>Virtual Knob Extension</h4><p>For example, knob “lock_timeout”, with a value range from 0 to 2147483647, controls the maximum allowed duration of any wait for a lock. When it is set to zero, the timeout function is disabled and this makes “0” a special value.</p><ol><li>utilize Structured Knowledge to select which knobs have the special values</li><li>add “virtual knobs” (control_knob, normal_knob and special_knob) for each knob with special value.  control_knob为1&#x2F;0分别表示special_knob(normal_knob)被激活</li></ol><h3 id="propose-a-Coarse-to-Fine-Bayesian-Optimization-Framework-to-explore-the-optimized-space"><a href="#propose-a-Coarse-to-Fine-Bayesian-Optimization-Framework-to-explore-the-optimized-space" class="headerlink" title="propose a Coarse-to-Fine Bayesian Optimization Framework to explore the optimized space"></a>propose a Coarse-to-Fine Bayesian Optimization Framework to explore the optimized space</h3><p>本工作主要发现：将领域知识融入优化过程，迭代成本会大大降低<br>现有的方法依赖于历史结果来使用良好的起点初始化，但是准备这些结果的成本很高并需要在硬件组件和软件版本的变化下进行重建。</p><h4 id="the-fist-stage："><a href="#the-fist-stage：" class="headerlink" title="the fist stage："></a>the fist stage：</h4><p>BO只探索整个异构空间的离散子空间Tiny Feasible Space</p><ol><li>ten samples (𝑛 &#x3D; 10)  are generated by Latin Hypercube Sampling (LHS) from Tiny Feasible Space </li><li>the samples are evaluated on DBMS (Line 3) and the surrogate model is initialized</li><li>we explore Tiny Feasible Space with the BO algorithm for C iterations</li></ol><h4 id="the-second-satge"><a href="#the-second-satge" class="headerlink" title="the second satge"></a>the second satge</h4><ol><li>we bootstrap BO with the samples from the first stage</li><li>we narrow down space P with the Region Discard technique</li><li>we take into account the knobs with special values with the Virtual Knob Extension technique</li></ol><h2 id="EXPERIMENTAL-EVALUATION"><a href="#EXPERIMENTAL-EVALUATION" class="headerlink" title="EXPERIMENTAL EVALUATION"></a>EXPERIMENTAL EVALUATION</h2><p>baseline: GPTuner is implemented with SMAC3 library and uses OpenAI completion API of GPT-4.<br>We run <strong>three tuning sessions</strong> for each method, with each session consisting of **100 iterations **and each iteration requires a stress test for the target workload.<br>For BO-based methods, we follow the setting of iTuned [12] and OtterTune [50] by **executing 10 configurations **generated by Latin Hypercube Sampling (LHS) [31] to initialize the surrogate model.<br>For RL-based methods, we follow recent works [4, 48] and <strong>do not train the neural network</strong> since it is evaluated that the trained network suffers from over-fitting [57].</p><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旋钮调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLDB 2024 OpAdviser</title>
      <link href="/2024/04/21/VLDB-2024-OpAdviser/"/>
      <url>/2024/04/21/VLDB-2024-OpAdviser/</url>
      
        <content type="html"><![CDATA[<p>VLDB 2024 An Efficient Transfer Learning Based Configuration Adviser for Database Tuning</p><span id="more"></span><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>评估配置需要资源和时间来运行工作负载，这是优化数据库时的主要成本。给定一个调优任务，搜索空间的构造和搜索优化器的选择是影响调优效率的主要因素。<br>虽然先前的研究试图通过选择重要的旋钮和开发高级搜索优化器，在实践中应用先前研究的调优系统来提高调优效率，但仍然存在以下问题和挑战：</p><ol><li><strong>无效的大搜索空间</strong></li></ol><p>选择重要的knob可以加速调优过程。但是全局重要旋钮的静态选择并不适用于各种工作负载，而为了选择<strong>特定于工作负载</strong>的重要旋钮在之前的实践中需要在不同的配置上执行许多目标工作负载。不幸的是，这种方法是高成本的。<br>针对每个旋钮选择适当的值范围是有用的。这是因为探索默认范围的空间是资源密集型的，浪费了大量不可行区域的实验；并且有效的范围可能因为工作负载的不同而不同，手册中的默认值范围是广泛的，而不是针对特定的工作负载设置的。</p><ol start="2"><li><strong>不同调优任务的固定搜索优化器</strong></li></ol><p>尽管存在各种的<strong>搜索优化器</strong>，但是没有一个<strong>搜索优化器</strong>可以主导所有的调优任务。简单的启发式方法不能捕获调优任务（tuning task）与不同优化器性能之间的关系，无法推荐最佳搜索优化器。</p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>OpAdviser利用从之前调优任务中收集的<strong>历史数据</strong>和构建的<strong>bechmark数据</strong>来自动构建紧凑的<strong>搜索空间</strong>并为给定任务选择适当的<strong>搜索优化器</strong>。</p><ul><li>通过从类似的历史任务中提取有前途的几何图形来获得<strong>workload-specific的重要旋钮及其有效范围</strong>（迁移学习）</li><li>捕获任务特征与候选优化器性能排名的关系来推荐合适的<strong>搜索优化器</strong>（数据驱动的方法）</li></ul><h2 id="结构总览"><a href="#结构总览" class="headerlink" title="结构总览"></a>结构总览</h2><p><img src="image.png" alt="image.png"></p><h3 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h3><ul><li>controller 通过与终端用户和数据库实例交互来控制调优过程</li><li>data repository 存储不同的调优任务的历史observations（${ \theta_j^i,f(\theta_j^i,w_i)  }, i^{th}$任务，$w_i$目标调优任务），obsevations包含所有的可配置旋钮，保证其维度相同</li><li>space constructor 生成一个紧凑的搜索空间</li><li>optimizer adviser 选择最合适的搜索优化器</li><li>configuration generator 生成最优的配置</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>用户提供调优目标，调优预算，数据库实例，目标工作负载，开始迭代调优</li><li>controller在云数据库上应用新的配置，执行工作负载并获得数据库性能</li><li>存储observation到data repository</li><li>使用目标和历史任务的observations，space constructor识别相似的任务并通过组合有希望的范围构建一个紧凑的搜索空间</li><li>optimizer adviser 分析搜索空间和历史观测，提取目标任务的meta-feature，输入meta-ranker（根据基准数据预训练获得）。meta-ranker预测optimizers的性能排名并推荐排名靠前的</li><li>根据搜索空间和推荐的搜索优化器，在configuration generator推荐有希望的配置并传递到controller</li><li>迭代2-6，直到预算耗尽，获得最优的配置，返回给用户</li></ol><h2 id="搜索空间的构建"><a href="#搜索空间的构建" class="headerlink" title="搜索空间的构建"></a>搜索空间的构建</h2><p>为了识别出基于特定工作负载的重要旋钮和旋钮值范围，同时减少目标工作负载的运行，我们借助相似的历史任务，去获得紧凑的搜索空间。同时，该紧凑搜索空间是考虑任务相似性相应地<strong>动态</strong>调整区域，已避免对搜索空间的过度修剪。<br>输入：之前任务(source task)的观测，目标任务(target task)<br>输出：紧凑的目标搜索空间</p><h3 id="相似任务识别"><a href="#相似任务识别" class="headerlink" title="相似任务识别"></a>相似任务识别</h3><p>不同调优任务的历史观测值可以提供有价值的信息。这是由于相似的工作负载运行在不同的硬件环境下可能共享与硬件无关的旋钮的常见范围；不同的工作负载也可能共享相同的不好的搜索区域。因此，对于给定的目标任务，检查相似的历史任务可以揭示类似的有希望的区域。<br>本文用目标任务和源任务在不同配置下是否具有相似的性能排名（基于<strong>目标观测值</strong>的一致排名对比率_ratio of concordant ranking pairs_$S(i,t)$）来获得相似性。<br><img src="image-1.png" alt="一致排名率"><br>$f^{‘}$:性能模型(在离线阶段用随机森林训练获得) ；$F(i,t)$表示目标任务和$w_i$源任务之间具有的一致排名对的数量；$H^t$表示目标任务下的observations数量<br>$F(i,t)$的计算：在目标任务的observation下，目标任务的性能和在$f^{‘}$预测的性能进行比较，获得排名一致的observation数量。<br>在每一次迭代中，计算数据资源库中的所有源任务与当前目标任务的相似度，过滤掉相似度s低于0.5的源任务。</p><h3 id="有效区域提取"><a href="#有效区域提取" class="headerlink" title="有效区域提取"></a>有效区域提取</h3><p>如何通过考虑源任务与目标任务的相似性来提取有效区域？<br>需要从第i个任务中提取到的<strong>最小的有意义的值范围G</strong>：<br><strong>构建G</strong>：（1）当观测到的性能大于$f^i_b$，将该观测到的配置加入到G中；（2）当随机采样到的预测性能大于$f^i_b$，加入G</p><p>当目标任务与当前源任务相似度高的时候，$f^i_b$趋近于$f_{best}^i$，使得提取的区域紧凑；当当目标任务与当前源任务相似度低的时候，提取的区域大，防止对搜索空间的过度裁剪。</p><h4 id="重要旋钮选择策略"><a href="#重要旋钮选择策略" class="headerlink" title="重要旋钮选择策略"></a>重要旋钮选择策略</h4><p>基于历史观测，利用SHAP（通过解释配置之间的性能变化来衡量功能的重要性）识别重要的旋钮。丢弃仅仅表现具有负贡献的旋钮，其旋钮的有效范围设置为0。</p><h3 id="多数加权表决"><a href="#多数加权表决" class="headerlink" title="多数加权表决"></a>多数加权表决</h3><p>最后一步是生成目标搜索空间，包括重要的旋钮及其值范围。本文采用多数加权投票策略来汇总候选任务的建议。<br>对第i个任务分配一个与其目标任务相似度成正比的权重<br><strong>选择重要旋钮：</strong>一个旋钮是否丢弃，取决于多数源任务是否同意。这种方法不需要设置重要旋钮的数量这个超参数。<br><strong>确定旋钮的值范围</strong>：对每个保留的旋钮，枚举提取的有效范围，保留多数投票保留的部分。</p><h4 id="进一步避免负迁移"><a href="#进一步避免负迁移" class="headerlink" title="进一步避免负迁移"></a>进一步避免负迁移</h4><ol><li><p>将目标任务作为选民，使用当前目标观测生成参考有效区域。在计算目选民的权重时，在未见过的配置上测试泛化能力。这种留一模型能够更好地泛化到未见过的配置。OpAdviser使用第四次迭代中的历史任务来暖启动空间建议，从第6次迭代开始引入目标模型。<br>这一步可以解决当没有历史观测数据时的冷启动问题。例如，寻求优化自己的应用程序的小型终端用户在离线数据收集存在挑战，他们在开始调优的时候没有历史数据。当_target concordant ordering ratio_超过0.5的时候，OpAdviser通过基于目标观测提取有效区域来构建搜索空间。</p></li><li><p>从所有的候选的任务中采集k个任务并不进行替换，而不是利用全部的任务。这为目标空间的生成增加随机性，避免陷入局部最优。</p></li></ol><h2 id="搜索优化器推荐"><a href="#搜索优化器推荐" class="headerlink" title="搜索优化器推荐"></a>搜索优化器推荐</h2><p>依赖于一般启发式方法进行搜索优化器的选择是有挑战且不可靠的。例如从GA转换到DDPG的迭代次数的确定是很复杂的。另外，启发式方法依赖于人类经验，这可能无法涵盖具有不同特征的各种调优任务。<br>本文提出一种数据驱动的方法，利用机器学习模型来调整任务选择。通过预训练模型，OpAdviser利用从不同优化器的运行历史中提取的知识，直接生成预测，而无需在当前任务上实际运行候选优化器。</p><h3 id="元特征提取"><a href="#元特征提取" class="headerlink" title="元特征提取"></a>元特征提取</h3><p>对每个调优任务，提取以下元特征。这些元特征表征调优任务，并且可以影响不同搜索优化器的调优性能。</p><ol><li>空间特征</li></ol><p>旋钮的数量，搜索空间的大小，连续型和离散型旋钮的比例</p><ol start="2"><li>响应面特征</li></ol><p>响应面的差异主要来源于不同的工作负载和硬件环境。采用一个相似向量（包含当前的任务和之前每个任务的一致排名对的比例S(i,k)）</p><ol start="3"><li>调优过程特征</li></ol><p>使用当前迭代次数作为特征</p><h3 id="离线数据生成"><a href="#离线数据生成" class="headerlink" title="离线数据生成"></a>离线数据生成</h3><p>训练模型，需要数据来演示不同候选优化器在特定条件下的表现，但是对所有潜在的调优任务执行详细的测试成本是高昂的。<br>本文采用<strong>主动学习</strong>技术来选择样本进行测试和标记，以用更少的测试工作来有效收集数据，并且获得相对重要的数据。<br>首先通过变换搜索空间和响应特征生成一组候选的调优任务；我们迭代选择不确定性最高的任务进行测试。例如使用主动学习指标classification margin，余量margin最小的样本代表最大的不确定性。<br>此过程持续进行，直到达到所需的决策裕度水平或测试预算耗尽。</p><h3 id="元排名器构建"><a href="#元排名器构建" class="headerlink" title="元排名器构建"></a>元排名器构建</h3><p>利用收集到的数据，我们继续构建学习模型，即元排名器（meta-ranker）<br>输入：任务的元特征，两个候选的搜索优化器<br>输出：在给定任务上候选优化器相对的表现排名</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>本文采用的LambdaMART，使用梯度提升决策树，优化成对的损失函数，去捕捉不同调优场景下的优化器的相对性能</p><p>元排名器训练过程进行数据结构化，m表示元特征，$o_i$表示独热编码的候选优化器，I表示一个标识符，当$o_i$的性能超过$o_j$时，I为1，否则为0。</p><h4 id="在线阶段"><a href="#在线阶段" class="headerlink" title="在线阶段"></a>在线阶段</h4><p>OpAdviser从目标任务提取元特征，和候选的一对优化器输入到元排名器，推荐排名靠前的优化器。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>这个方法能够考虑任务的特征去获得优化器的性能。与预测最佳优化器的直接分类模型相比，通过考虑成对性能可以提取更多信息。此外，与回归模型相比，meta-ranker仅需要优化器对之间的比较，并且可以更好地处理噪声数据和不同尺度的数据。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>使用吞吐量作为最大的目标，比较200次迭代（每个迭代中3分钟的压力测试）</li><li>4个工作负载：Sysbench (RO), Sysbench (WO), Sysbench (RW), Twitter</li><li>候选的优化器：MBO, SMAC, DDPG, GA</li><li>数据存储库：为meta-ranker生成训练数据，通过调整调优旋钮产生390个不同的空间，变换9个工作负载，一共生成3510调优任务。从中标记48个任务，记录在不同的调优迭代和4个候选优化器下的性能观测。为了保证比较的公平，将保留数据存储库中存在的目标工作负载的任何观察结果。</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>与LlamaTune、Hunter、DB-BERT、ResTune、OtterTune、CDBTune、SMAC比较，OpAdviser能够在一半的调优预算中实现相同的最优的吞吐量。</p><h3 id="开销分析"><a href="#开销分析" class="headerlink" title="开销分析"></a>开销分析</h3><p>在离线训练阶段，一个任务的表及过程消耗2400分钟（4x200x3，一次迭代3分钟压力测试，一共200次迭代）。标记48个调优任务，一共花费20天（4个数据库实例并行）<br>在线阶段，OpAdviser虽然在算法上需要更多的时间（秒级别），但是借助历史任务观测构建一个紧凑的搜索空间，能够识别具有较少目标工作负载运行的更好配置。</p><h3 id="泛化性分析"><a href="#泛化性分析" class="headerlink" title="泛化性分析"></a>泛化性分析</h3><p>在不同数据大小和硬件设置下，实验OpAdviser的性能</p><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h3 id="-3"><a href="#-3" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旋钮调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo增加页面</title>
      <link href="/2024/04/21/%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2/"/>
      <url>/2024/04/21/%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>增加页面笔记</p><span id="more"></span><h2 id="增加页面"><a href="#增加页面" class="headerlink" title="增加页面"></a>增加页面</h2><h3 id="创建一个新的页面"><a href="#创建一个新的页面" class="headerlink" title="创建一个新的页面"></a>创建一个新的页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 更多信息</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
